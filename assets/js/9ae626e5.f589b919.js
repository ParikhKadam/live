"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1794],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return l},MDXProvider:function(){return c},mdx:function(){return f},useMDXComponents:function(){return p},withMDXComponents:function(){return s}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){return function(n){var t=p(n.components);return r.createElement(e,i({},n,{components:t}))}},p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),s=p(t),c=a,u=s["".concat(o,".").concat(c)]||s[c]||h[c]||i;return t?r.createElement(u,m(m({ref:n},l),{},{components:t})):r.createElement(u,m({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var m={};for(var d in n)hasOwnProperty.call(n,d)&&(m[d]=n[d]);m.originalType=e,m.mdxType="string"==typeof e?e:a,o[1]=m;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},29022:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return m},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var r=t(83117),a=t(80102),i=(t(67294),t(3905)),o=["components"],m={id:"torchlive_vision.transforms",title:"Interface: Transforms",sidebar_label:"Transforms",custom_edit_url:null},d=void 0,l={unversionedId:"api/core/interfaces/torchlive_vision.transforms",id:"api/core/interfaces/torchlive_vision.transforms",title:"Interface: Transforms",description:"torchlive/vision.Transforms",source:"@site/docs/api/core/interfaces/torchlive_vision.transforms.md",sourceDirName:"api/core/interfaces",slug:"/api/core/interfaces/torchlive_vision.transforms",permalink:"/live/docs/next/api/core/interfaces/torchlive_vision.transforms",editUrl:null,tags:[],version:"current",frontMatter:{id:"torchlive_vision.transforms",title:"Interface: Transforms",sidebar_label:"Transforms",custom_edit_url:null},sidebar:"api",previous:{title:"Transforms",permalink:"/live/docs/next/api/core/interfaces/torchlive_torchvision.transforms"},next:{title:"CLI",permalink:"/live/docs/next/api/cli"}},s=[{value:"Methods",id:"methods",children:[{value:"centerCrop",id:"centercrop",children:[{value:"Parameters",id:"parameters",children:[],level:4},{value:"Returns",id:"returns",children:[],level:4},{value:"Defined in",id:"defined-in",children:[],level:4}],level:3},{value:"normalize",id:"normalize",children:[{value:"Parameters",id:"parameters-1",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"resize",id:"resize",children:[{value:"Parameters",id:"parameters-2",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3}],level:2}],p={toc:s};function c(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.mdx)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"/live/docs/next/api/core/modules/torchlive_vision"},"torchlive/vision"),".Transforms"),(0,i.mdx)("p",null,"Transforms are common image transformations available in the\ntorchvision.transforms module."),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://pytorch.org/vision/0.12/transforms.html"},"https://pytorch.org/vision/0.12/transforms.html")),(0,i.mdx)("h2",{id:"methods"},"Methods"),(0,i.mdx)("h3",{id:"centercrop"},"centerCrop"),(0,i.mdx)("p",null,"\u25b8 ",(0,i.mdx)("strong",{parentName:"p"},"centerCrop"),"(",(0,i.mdx)("inlineCode",{parentName:"p"},"size"),"): ",(0,i.mdx)("inlineCode",{parentName:"p"},"Transform")),(0,i.mdx)("p",null,"Crops the image Tensor at the center. It is expected to have ",(0,i.mdx)("inlineCode",{parentName:"p"},"[\u2026, H, W]"),"\nshape, where ",(0,i.mdx)("inlineCode",{parentName:"p"},"\u2026")," means an arbitrary number of leading dimensions. If image\nsize is smaller than output size along any edge, image is padded with 0\nand then center cropped."),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://pytorch.org/vision/0.12/generated/torchvision.transforms.CenterCrop.html"},"https://pytorch.org/vision/0.12/generated/torchvision.transforms.CenterCrop.html")),(0,i.mdx)("h4",{id:"parameters"},"Parameters"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"size")),(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ","[",(0,i.mdx)("inlineCode",{parentName:"td"},"number"),"]"," ","|"," ","[",(0,i.mdx)("inlineCode",{parentName:"td"},"number"),", ",(0,i.mdx)("inlineCode",{parentName:"td"},"number"),"]"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Desired output size of the crop. If size is an int instead of sequence like ",(0,i.mdx)("inlineCode",{parentName:"td"},"(h, w)"),", a square crop ",(0,i.mdx)("inlineCode",{parentName:"td"},"(size, size)")," is made. If provided a sequence of length 1, it will be interpreted as ",(0,i.mdx)("inlineCode",{parentName:"td"},"(size[0], size[0])"),".")))),(0,i.mdx)("h4",{id:"returns"},"Returns"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Transform")),(0,i.mdx)("h4",{id:"defined-in"},"Defined in"),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://github.com/pytorch/live/blob/4306bd7/react-native-pytorch-core/src/torchlive/vision.ts#L33"},"torchlive/vision.ts:33")),(0,i.mdx)("hr",null),(0,i.mdx)("h3",{id:"normalize"},"normalize"),(0,i.mdx)("p",null,"\u25b8 ",(0,i.mdx)("strong",{parentName:"p"},"normalize"),"(",(0,i.mdx)("inlineCode",{parentName:"p"},"mean"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"std"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"inplace?"),"): ",(0,i.mdx)("inlineCode",{parentName:"p"},"Transform")),(0,i.mdx)("p",null,"Normalize a tensor image with mean and standard deviation. Given mean:\n",(0,i.mdx)("inlineCode",{parentName:"p"},"(mean[1],...,mean[n])")," and std: ",(0,i.mdx)("inlineCode",{parentName:"p"},"(std[1],..,std[n])")," for ",(0,i.mdx)("inlineCode",{parentName:"p"},"n")," channels,\nthis transform will normalize each channel of the input torch."),(0,i.mdx)("p",null,"Tensor i.e., ",(0,i.mdx)("inlineCode",{parentName:"p"},"output[channel] = (input[channel] - mean[channel]) / std[channel]"),"."),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://pytorch.org/vision/0.12/generated/torchvision.transforms.Normalize.html"},"https://pytorch.org/vision/0.12/generated/torchvision.transforms.Normalize.html")),(0,i.mdx)("h4",{id:"parameters-1"},"Parameters"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"mean")),(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"number"),"[]"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Sequence of means for each channel.")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"std")),(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"number"),"[]"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Sequence of standard deviations for each channel.")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"inplace?")),(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"boolean")),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Bool to make this operation in-place.")))),(0,i.mdx)("h4",{id:"returns-1"},"Returns"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Transform")),(0,i.mdx)("h4",{id:"defined-in-1"},"Defined in"),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://github.com/pytorch/live/blob/4306bd7/react-native-pytorch-core/src/torchlive/vision.ts#L48"},"torchlive/vision.ts:48")),(0,i.mdx)("hr",null),(0,i.mdx)("h3",{id:"resize"},"resize"),(0,i.mdx)("p",null,"\u25b8 ",(0,i.mdx)("strong",{parentName:"p"},"resize"),"(",(0,i.mdx)("inlineCode",{parentName:"p"},"size"),"): ",(0,i.mdx)("inlineCode",{parentName:"p"},"Transform")),(0,i.mdx)("p",null,"Resize the input tensor image to the given size. It is expected to have\n",(0,i.mdx)("inlineCode",{parentName:"p"},"[\u2026, H, W]")," shape, where ",(0,i.mdx)("inlineCode",{parentName:"p"},"\u2026")," means an arbitrary number of leading\ndimensions."),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://pytorch.org/vision/0.12/generated/torchvision.transforms.Resize.html"},"https://pytorch.org/vision/0.12/generated/torchvision.transforms.Resize.html")),(0,i.mdx)("h4",{id:"parameters-2"},"Parameters"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:"left"},"Name"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"Type"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"size")),(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("inlineCode",{parentName:"td"},"number")," ","|"," ","[",(0,i.mdx)("inlineCode",{parentName:"td"},"number"),"]"," ","|"," ","[",(0,i.mdx)("inlineCode",{parentName:"td"},"number"),", ",(0,i.mdx)("inlineCode",{parentName:"td"},"number"),"]"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Desired output size. If size is a sequence like ",(0,i.mdx)("inlineCode",{parentName:"td"},"(h, w)"),", output size will be matched to this. If size is an int, smaller edge of the image will be matched to this number. i.e, if ",(0,i.mdx)("inlineCode",{parentName:"td"},"height > width"),", then image will be rescaled to ",(0,i.mdx)("inlineCode",{parentName:"td"},"(size * height / width, size)"),".")))),(0,i.mdx)("h4",{id:"returns-2"},"Returns"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Transform")),(0,i.mdx)("h4",{id:"defined-in-2"},"Defined in"),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://github.com/pytorch/live/blob/4306bd7/react-native-pytorch-core/src/torchlive/vision.ts#L62"},"torchlive/vision.ts:62")))}c.isMDXComponent=!0}}]);